import "jsr:@supabase/functions-js/edge-runtime.d.ts"

interface DocumentRequest {
  bookingId: string;
  docType: 'ticket' | 'confirmation';
  bookingData: any;
}

// Simple PDF generation function (in production, use a proper PDF library)
function generatePDF(content: string): Uint8Array {
  // This is a minimal PDF structure - in production use jsPDF or similar
  const pdfHeader = `%PDF-1.4
1 0 obj
<<
/Type /Catalog
/Pages 2 0 R
>>
endobj
2 0 obj
<<
/Type /Pages
/Kids [3 0 R]
/Count 1
>>
endobj
3 0 obj
<<
/Type /Page
/Parent 2 0 R
/MediaBox [0 0 612 792]
/Contents 4 0 R
/Resources <<
/Font <<
/F1 5 0 R
>>
>>
>>
endobj
4 0 obj
<<
/Length ${content.length + 50}
>>
stream
BT
/F1 12 Tf
72 720 Td
(${content}) Tj
ET
endstream
endobj
5 0 obj
<<
/Type /Font
/Subtype /Type1
/BaseFont /Helvetica
>>
endobj
xref
0 6
0000000000 65535 f 
0000000009 00000 n 
0000000074 00000 n 
0000000120 00000 n 
0000000274 00000 n 
0000000373 00000 n 
trailer
<<
/Size 6
/Root 1 0 R
>>
startxref
456
%%EOF`;

  return new TextEncoder().encode(pdfHeader);
}

function generateTicketContent(booking: any): string {
  return `E-TICKET - ${booking.booking_reference}

FLIGHT DETAILS
${booking.booking_data?.flightNumber || 'Flight'}
From: ${booking.booking_data?.origin || 'Origin'}
To: ${booking.booking_data?.destination || 'Destination'}
Date: ${booking.booking_data?.departureDate || booking.created_at}

PASSENGER INFORMATION
${booking.booking_data?.passenger?.name || 'Passenger Name'}

BOOKING REFERENCE: ${booking.booking_reference}
STATUS: ${booking.status.toUpperCase()}

This is your electronic ticket. Please present this document at the airport.

Generated by MAKU.Travel`;
}

function generateConfirmationContent(booking: any): string {
  const isHotel = booking.booking_type === 'hotel';
  
  if (isHotel) {
    return `HOTEL CONFIRMATION - ${booking.booking_reference}

ACCOMMODATION DETAILS
Hotel: ${booking.booking_data?.hotel?.hotel || booking.booking_data?.hotelName || 'Hotel Name'}
Location: ${booking.booking_data?.destination || 'Location'}
Check-in: ${booking.booking_data?.checkInDate || booking.booking_data?.checkIn || 'Check-in Date'}
Check-out: ${booking.booking_data?.checkOutDate || booking.booking_data?.checkOut || 'Check-out Date'}

GUEST INFORMATION
${booking.booking_data?.guest?.name || 'Guest Name'}

BOOKING REFERENCE: ${booking.booking_reference}
STATUS: ${booking.status.toUpperCase()}
TOTAL: $${booking.total_amount || 'N/A'}

Your reservation is confirmed. Please present this document at check-in.

Generated by MAKU.Travel`;
  } else {
    return `BOOKING CONFIRMATION - ${booking.booking_reference}

${booking.booking_type.toUpperCase()} BOOKING
Reference: ${booking.booking_reference}
Status: ${booking.status.toUpperCase()}
Total: $${booking.total_amount || 'N/A'}
Date: ${booking.created_at}

Thank you for booking with MAKU.Travel!

Generated by MAKU.Travel`;
  }
}

Deno.serve(async (req) => {
  // Handle CORS
  if (req.method === 'OPTIONS') {
    return new Response(null, {
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
        'Access-Control-Allow-Methods': 'POST, OPTIONS',
      },
    });
  }

  try {
    const { bookingId, docType, bookingData }: DocumentRequest = await req.json();

    if (!bookingId || !docType || !bookingData) {
      return new Response(JSON.stringify({ error: 'Missing required parameters' }), {
        status: 400,
        headers: { 'Content-Type': 'application/json' },
      });
    }

    let content: string;
    
    if (docType === 'ticket' && bookingData.booking_type === 'flight') {
      content = generateTicketContent(bookingData);
    } else {
      content = generateConfirmationContent(bookingData);
    }

    const pdfBuffer = generatePDF(content);

    return new Response(pdfBuffer, {
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="${docType}-${bookingData.booking_reference}.pdf"`,
        'Access-Control-Allow-Origin': '*',
      },
    });

  } catch (error) {
    console.error('Error generating document:', error);
    return new Response(JSON.stringify({ error: 'Document generation failed' }), {
      status: 500,
      headers: { 
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
      },
    });
  }
});