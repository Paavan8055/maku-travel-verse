import "jsr:@supabase/functions-js/edge-runtime.d.ts"

interface DocumentRequest {
  bookingId: string;
  docType: 'ticket' | 'confirmation';
  bookingData: any;
}

// Simple PDF generation function (in production, use a proper PDF library)
function generatePDF(content: string): Uint8Array {
  // This is a minimal PDF structure - in production use jsPDF or similar
  const pdfHeader = `%PDF-1.4
1 0 obj
<<
/Type /Catalog
/Pages 2 0 R
>>
endobj
2 0 obj
<<
/Type /Pages
/Kids [3 0 R]
/Count 1
>>
endobj
3 0 obj
<<
/Type /Page
/Parent 2 0 R
/MediaBox [0 0 612 792]
/Contents 4 0 R
/Resources <<
/Font <<
/F1 5 0 R
>>
>>
>>
endobj
4 0 obj
<<
/Length ${content.length + 50}
>>
stream
BT
/F1 12 Tf
72 720 Td
(${content}) Tj
ET
endstream
endobj
5 0 obj
<<
/Type /Font
/Subtype /Type1
/BaseFont /Helvetica
>>
endobj
xref
0 6
0000000000 65535 f 
0000000009 00000 n 
0000000074 00000 n 
0000000120 00000 n 
0000000274 00000 n 
0000000373 00000 n 
trailer
<<
/Size 6
/Root 1 0 R
>>
startxref
456
%%EOF`;

  return new TextEncoder().encode(pdfHeader);
}

function generateTicketContent(booking: any): string {
  console.log('Generating ticket content for booking:', booking);
  
  // Extract passenger information from the passengers array
  const passengers = booking.booking_data?.passengers || [];
  const primaryPassenger = passengers[0] || {};
  const passengerName = primaryPassenger.firstName && primaryPassenger.lastName 
    ? `${primaryPassenger.firstName} ${primaryPassenger.lastName}` 
    : booking.booking_data?.customerDetails?.firstName && booking.booking_data?.customerDetails?.lastName
    ? `${booking.booking_data.customerDetails.firstName} ${booking.booking_data.customerDetails.lastName}`
    : 'Passenger Name';

  // Extract flight information from the flight offers
  const flightOffers = booking.booking_data?.flightOffers || [];
  const firstOffer = flightOffers[0] || {};
  const itinerary = firstOffer.itineraries?.[0] || {};
  const segment = itinerary.segments?.[0] || {};
  
  const flightNumber = segment.carrierCode && segment.number 
    ? `${segment.carrierCode}${segment.number}`
    : booking.booking_data?.flightNumber || 'Flight';
    
  const departure = segment.departure || {};
  const arrival = segment.arrival || {};
  const origin = departure.iataCode || booking.booking_data?.origin || 'Origin';
  const destination = arrival.iataCode || booking.booking_data?.destination || 'Destination';
  
  // Format dates properly
  const departureDate = departure.at 
    ? new Date(departure.at).toLocaleDateString('en-AU', { 
        weekday: 'long', 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric' 
      })
    : booking.booking_data?.departureDate || new Date(booking.created_at).toLocaleDateString();
    
  const departureTime = departure.at 
    ? new Date(departure.at).toLocaleTimeString('en-AU', { 
        hour: '2-digit', 
        minute: '2-digit' 
      })
    : '00:00';

  return `E-TICKET - ${booking.booking_reference}

FLIGHT DETAILS
Flight: ${flightNumber}
Route: ${origin} â†’ ${destination}
Date: ${departureDate}
Departure: ${departureTime}
Aircraft: ${segment.aircraft?.code || 'TBD'}

PASSENGER INFORMATION
Name: ${passengerName.toUpperCase()}
Seat: ${primaryPassenger.seat || 'Will be assigned at check-in'}
Class: ${firstOffer.travelerPricings?.[0]?.fareDetailsBySegment?.[0]?.class || 'Economy'}

BOOKING REFERENCE: ${booking.booking_reference}
STATUS: ${booking.status.toUpperCase()}
PNR: ${booking.provider_confirmation_code || 'TBD'}

Important: Please arrive at the airport 2 hours before domestic flights or 3 hours before international flights.
This electronic ticket is valid for travel. Please present photo ID at check-in.

Generated by MAKU.Travel - Your trusted travel partner`;
}

function generateConfirmationContent(booking: any): string {
  console.log('Generating confirmation content for booking:', booking);
  
  const isHotel = booking.booking_type === 'hotel';
  
  if (isHotel) {
    // Extract guest information similar to passenger extraction
    const passengers = booking.booking_data?.passengers || [];
    const primaryGuest = passengers[0] || {};
    const guestName = primaryGuest.firstName && primaryGuest.lastName 
      ? `${primaryGuest.firstName} ${primaryGuest.lastName}` 
      : booking.booking_data?.customerDetails?.firstName && booking.booking_data?.customerDetails?.lastName
      ? `${booking.booking_data.customerDetails.firstName} ${booking.booking_data.customerDetails.lastName}`
      : booking.booking_data?.guest?.name || 'Guest Name';

    // Extract hotel information
    const hotelOffers = booking.booking_data?.hotelOffers || [];
    const firstOffer = hotelOffers[0] || {};
    const hotel = firstOffer.hotel || booking.booking_data?.hotel || {};
    
    const hotelName = hotel.name || hotel.hotel || booking.booking_data?.hotelName || 'Hotel Name';
    const hotelAddress = hotel.address ? 
      `${hotel.address.lines?.join(', ') || ''} ${hotel.address.cityName || ''} ${hotel.address.countryCode || ''}`.trim()
      : booking.booking_data?.destination || 'Location';
    
    // Format dates
    const checkInDate = booking.booking_data?.checkInDate || booking.booking_data?.checkIn || 'Check-in Date';
    const checkOutDate = booking.booking_data?.checkOutDate || booking.booking_data?.checkOut || 'Check-out Date';
    
    // Room information
    const roomType = firstOffer.room?.type || booking.booking_data?.roomType || 'Standard Room';
    const roomDescription = firstOffer.room?.description || '';

    return `HOTEL CONFIRMATION - ${booking.booking_reference}

ACCOMMODATION DETAILS
Hotel: ${hotelName}
Address: ${hotelAddress}
Check-in: ${checkInDate}
Check-out: ${checkOutDate}
Room Type: ${roomType}
${roomDescription ? `Room Details: ${roomDescription}` : ''}

GUEST INFORMATION
Name: ${guestName.toUpperCase()}
Adults: ${booking.booking_data?.adults || 1}
${booking.booking_data?.children ? `Children: ${booking.booking_data.children}` : ''}

BOOKING REFERENCE: ${booking.booking_reference}
STATUS: ${booking.status.toUpperCase()}
TOTAL: $${booking.total_amount || 'N/A'} ${booking.currency || 'AUD'}
CONFIRMATION CODE: ${booking.provider_confirmation_code || 'TBD'}

Check-in time: 3:00 PM | Check-out time: 11:00 AM
Please present photo ID and this confirmation at check-in.

Generated by MAKU.Travel - Your trusted travel partner`;
  } else {
    // Generic confirmation for other booking types
    const customerName = booking.booking_data?.customerDetails?.firstName && booking.booking_data?.customerDetails?.lastName
      ? `${booking.booking_data.customerDetails.firstName} ${booking.booking_data.customerDetails.lastName}`
      : 'Customer';
      
    return `BOOKING CONFIRMATION - ${booking.booking_reference}

${booking.booking_type.toUpperCase()} BOOKING
Customer: ${customerName}
Reference: ${booking.booking_reference}
Status: ${booking.status.toUpperCase()}
Total: $${booking.total_amount || 'N/A'} ${booking.currency || 'AUD'}
Booking Date: ${new Date(booking.created_at).toLocaleDateString('en-AU')}
${booking.provider_confirmation_code ? `Confirmation Code: ${booking.provider_confirmation_code}` : ''}

Thank you for booking with MAKU.Travel!
For any inquiries, please reference your booking number: ${booking.booking_reference}

Generated by MAKU.Travel - Your trusted travel partner`;
  }
}

Deno.serve(async (req) => {
  // Handle CORS
  if (req.method === 'OPTIONS') {
    return new Response(null, {
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
        'Access-Control-Allow-Methods': 'POST, OPTIONS',
      },
    });
  }

  try {
    console.log('Document generation request received');
    const { bookingId, docType, bookingData }: DocumentRequest = await req.json();
    
    console.log('Request details:', {
      bookingId,
      docType,
      bookingType: bookingData?.booking_type,
      hasBookingData: !!bookingData
    });

    if (!bookingId || !docType || !bookingData) {
      console.error('Missing required parameters:', { bookingId, docType, hasBookingData: !!bookingData });
      return new Response(JSON.stringify({ 
        error: 'Missing required parameters',
        details: {
          bookingId: !bookingId ? 'missing' : 'present',
          docType: !docType ? 'missing' : 'present',
          bookingData: !bookingData ? 'missing' : 'present'
        }
      }), {
        status: 400,
        headers: { 
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*',
        },
      });
    }

    let content: string;
    
    console.log('Generating content for docType:', docType, 'bookingType:', bookingData.booking_type);
    
    if (docType === 'ticket' && bookingData.booking_type === 'flight') {
      content = generateTicketContent(bookingData);
    } else {
      content = generateConfirmationContent(bookingData);
    }
    
    console.log('Generated content length:', content.length);

    const pdfBuffer = generatePDF(content);
    const filename = `${docType}-${bookingData.booking_reference || 'unknown'}.pdf`;
    
    console.log('PDF generated successfully, filename:', filename);

    return new Response(pdfBuffer, {
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="${filename}"`,
        'Access-Control-Allow-Origin': '*',
      },
    });

  } catch (error) {
    console.error('Error generating document:', error);
    console.error('Error details:', {
      name: error.name,
      message: error.message,
      stack: error.stack
    });
    
    return new Response(JSON.stringify({ 
      error: 'Document generation failed',
      message: error.message || 'Unknown error occurred'
    }), {
      status: 500,
      headers: { 
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
      },
    });
  }
});