import{s as n}from"./index-CCJXHVND-1758529089024.js";const f={async getUserFunds(){const e=(await n.auth.getUser()).data.user;if(!e)return{data:[],error:null};console.log("Fetching funds for user:",e.id);const{data:o,error:t}=await n.from("funds").select("*").eq("user_id",e.id).order("id",{ascending:!1});if(console.log("Raw funds data:",o),console.log("Funds query error:",t),t)return console.error("Error fetching funds:",t),{data:[],error:t};const a=(o||[]).map(r=>({...r,id:r.id||"",user_id:r.user_id||e.id,balance:Number(r.balance)||0,name:r.name||"Travel Fund",status:r.status||"active",currency:r.currency||"USD",fund_type:r.fund_type||"personal",fund_code:r.fund_code||"",target_amount:r.target_amount||void 0,description:r.description||void 0,deadline:r.deadline||void 0,destination:r.destination||void 0,created_at:r.created_at||void 0,updated_at:r.updated_at||void 0}));return console.log("Enriched funds data:",a),{data:a,error:null}},async createFund(e){const o=(await n.auth.getUser()).data.user;if(!o)return{data:null,error:"User not authenticated"};console.log("Creating fund with data:",e);const{data:t,error:a}=await n.from("funds").insert({user_id:o.id,balance:0,name:e.name,description:e.description,target_amount:e.target_amount,currency:e.currency||"USD",fund_type:e.fund_type,deadline:e.deadline,destination:e.destination}).select().single();return console.log("Create fund result:",{data:t,error:a}),{data:t,error:a}},async addFunds(e,o,t){const a=(await n.auth.getUser()).data.user;if(!a)return{data:null,error:"User not authenticated"};console.log("Adding funds:",{fundId:e,amount:o,description:t});try{const{data:r,error:s}=await n.from("funds").select("balance").eq("id",e).eq("user_id",a.id).single();if(s||!r)return console.error("Fund not found or error:",s),{data:null,error:"Fund not found or access denied"};const{data:u,error:d}=await n.from("fund_transactions").insert({user_id:a.id,amount:o,type:"deposit",status:"completed"}).select().single();if(d)return console.error("Transaction error:",d),{data:null,error:d};const i=(r.balance||0)+o,{error:c}=await n.from("funds").update({balance:i}).eq("id",e).eq("user_id",a.id);return c?(console.error("Error updating fund balance:",c),{data:null,error:c}):{data:u,error:null}}catch(r){return console.error("Unexpected error in addFunds:",r),{data:null,error:r}}},async joinFundByCode(e){if(!(await n.auth.getUser()).data.user)return{data:null,error:"User not authenticated"};console.log("Joining fund with code:",e);try{const{data:t,error:a}=await n.from("funds").select("*").eq("fund_code",e).eq("status","active").single();return a||!t?{data:null,error:"Fund not found or invalid code"}:{data:t,error:null}}catch(t){return console.error("Unexpected error in joinFundByCode:",t),{data:null,error:t}}},async processPayment(e,o){var a,r;const t=(await n.auth.getUser()).data.user;if(!t)return{data:null,error:"User not authenticated"};try{const{data:s,error:u}=await n.from("funds").select("*").eq("id",e).single();if(u||!s)return{data:null,error:"Fund not found"};const{data:d,error:i}=await n.functions.invoke("create-booking-payment",{body:{bookingType:"travel-fund",fundId:e,fundName:s.name||"Travel Fund",amount:o,currency:"USD",customerInfo:{email:t.email,firstName:((a=t.user_metadata)==null?void 0:a.first_name)||"",lastName:((r=t.user_metadata)==null?void 0:r.last_name)||""}}});return i?(console.error("Payment error:",i),{data:null,error:i}):{data:d,error:null}}catch(s){return console.error("Error processing payment:",s),{data:null,error:s}}}};export{f as t};
