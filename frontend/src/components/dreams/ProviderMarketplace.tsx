/**
 * Provider Marketplace
 * Display competing offers from hotels & airlines
 * Integrated with off-season engine
 */

import { useState, useEffect } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import {
  Target, TrendingDown, Star, MapPin, Calendar, Users,
  Check, ArrowRight, Info, TestTube2, Zap, Hotel, Plane
} from 'lucide-react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';

interface ProviderOffer {
  id: string;
  provider: string;
  providerType: 'hotel' | 'airline' | 'package';
  dreamId: string;
  packageName: string;
  originalPrice: number;
  offerPrice: number;
  discount: number;
  benefits: string[];
  conditions: string[];
  validUntil: string;
  availability: 'high' | 'medium' | 'low';
  offSeason: boolean;
  testEnvironment: boolean;
}\n\nconst ProviderMarketplace = () => {\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n  const { toast } = useToast();\n  const dreamId = searchParams.get('dreamId');\n  \n  const [offers, setOffers] = useState<ProviderOffer[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetchProviderOffers();\n  }, [dreamId]);\n\n  const fetchProviderOffers = async () => {\n    try {\n      // TODO: Connect to real off-season API\n      // const response = await fetch(`${API_URL}/api/yield/offers/${dreamId}`);\n      \n      // Mock provider offers\n      setOffers([\n        {\n          id: 'offer-1',\n          provider: 'Expedia Sandbox',\n          providerType: 'package',\n          dreamId: 'dream-1',\n          packageName: 'Maldives Overwater Paradise - Premium',\n          originalPrice: 7500,\n          offerPrice: 5625,\n          discount: 25,\n          benefits: [\n            'Free villa upgrade to water villa',\n            'Daily spa credit $100',\n            'Private sunset cruise included',\n            'Airport seaplane transfers'\n          ],\n          conditions: [\n            'Book by: March 31, 2025',\n            'Travel between: Apr-Oct 2025',\n            'Minimum 7 nights stay',\n            'Non-refundable deposit $1000'\n          ],\n          validUntil: '2025-03-31',\n          availability: 'high',\n          offSeason: true,\n          testEnvironment: true\n        },\n        {\n          id: 'offer-2',\n          provider: 'Amadeus Test API',\n          providerType: 'hotel',\n          dreamId: 'dream-1',\n          packageName: 'Maldives Premium Package',\n          originalPrice: 7500,\n          offerPrice: 6000,\n          discount: 20,\n          benefits: [\n            'Overwater bungalow confirmed',\n            'Half-board meals included',\n            'Complimentary couples massage',\n            'Late checkout (6pm)'\n          ],\n          conditions: [\n            'Book by: April 15, 2025',\n            'Travel: May-Sep 2025',\n            'Full payment required',\n            'Cancellation fee applies'\n          ],\n          validUntil: '2025-04-15',\n          availability: 'medium',\n          offSeason: false,\n          testEnvironment: true\n        },\n        {\n          id: 'offer-3',\n          provider: 'RateHawk Development',\n          providerType: 'hotel',\n          dreamId: 'dream-1',\n          packageName: 'Maldives Off-Season Special',\n          originalPrice: 7500,\n          offerPrice: 5250,\n          discount: 30,\n          benefits: [\n            'Best price guarantee',\n            '2 free nights (book 7, get 9)',\n            'All-inclusive upgrade',\n            'Free spa treatments (3 sessions)'\n          ],\n          conditions: [\n            'Off-season dates only (May-Oct)',\n            'Book within 48 hours',\n            'Flexible dates required',\n            'Limited availability (4 villas)'\n          ],\n          validUntil: '2025-02-28',\n          availability: 'low',\n          offSeason: true,\n          testEnvironment: true\n        }\n      ]);\n    } catch (error) {\n      console.error('Failed to fetch offers:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleAcceptOffer = (offer: ProviderOffer) => {\n    toast({\n      title: \"Offer Accepted! \ud83c\udf89\",\n      description: `Saving ${offer.discount}% with ${offer.provider}`,\n    });\n    \n    // Navigate to booking flow\n    sessionStorage.setItem('selectedOffer', JSON.stringify(offer));\n    navigate(`/checkout?offerId=${offer.id}`);\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-slate-900 mb-2\">Provider Marketplace</h1>\n        <p className=\"text-slate-600\">\n          Hotels & airlines competing for your business â€¢ Best deals updated in real-time\n        </p>\n      </div>\n\n      {/* Offers */}\n      {offers.length > 0 ? (\n        <div className=\"space-y-6\">\n          {/* Best Deal Badge */}\n          <Card className=\"p-4 bg-gradient-to-r from-green-50 to-emerald-50 border-green-200\">\n            <div className=\"flex items-center gap-3\">\n              <Star className=\"w-5 h-5 text-green-600\" />\n              <div>\n                <p className=\"font-semibold text-green-900\">Best Deal Found!</p>\n                <p className=\"text-sm text-green-700\">Save up to 30% with off-season flexible dates</p>\n              </div>\n            </div>\n          </Card>\n\n          {offers\n            .sort((a, b) => b.discount - a.discount)\n            .map((offer, idx) => (\n            <Card key={offer.id} className={`overflow-hidden ${\n              idx === 0 ? 'border-2 border-green-500 shadow-lg' : ''\n            }`}>\n              {idx === 0 && (\n                <div className=\"bg-green-600 text-white px-4 py-2 text-sm font-semibold text-center\">\n                  \ud83c\udfc6 BEST DEAL - Highest Savings\n                </div>\n              )}\n              \n              <div className=\"p-6\">\n                {/* Provider Header */}\n                <div className=\"flex items-start justify-between mb-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-12 h-12 rounded-lg bg-gradient-to-br from-purple-100 to-rose-100 flex items-center justify-center\">\n                      {offer.providerType === 'hotel' ? (\n                        <Hotel className=\"w-6 h-6 text-purple-600\" />\n                      ) : offer.providerType === 'airline' ? (\n                        <Plane className=\"w-6 h-6 text-blue-600\" />\n                      ) : (\n                        <Target className=\"w-6 h-6 text-green-600\" />\n                      )}\n                    </div>\n                    <div>\n                      <h3 className=\"font-bold text-lg text-slate-900\">{offer.provider}</h3>\n                      <p className=\"text-sm text-slate-600\">{offer.packageName}</p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    {offer.testEnvironment && (\n                      <Badge className=\"mb-2 bg-blue-100 text-blue-700\">\n                        <TestTube2 className=\"w-3 h-3 mr-1\" />\n                        Test\n                      </Badge>\n                    )}\n                    {offer.offSeason && (\n                      <Badge className=\"bg-orange-100 text-orange-700\">\n                        <TrendingDown className=\"w-3 h-3 mr-1\" />\n                        Off-Season\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n\n                {/* Pricing */}\n                <div className=\"mb-6 p-4 bg-gradient-to-br from-purple-50 to-rose-50 rounded-lg\">\n                  <div className=\"flex items-end justify-between\">\n                    <div>\n                      <p className=\"text-sm text-slate-600 mb-1\">Total Package Price</p>\n                      <div className=\"flex items-baseline gap-3\">\n                        <span className=\"text-4xl font-bold text-purple-600\">${offer.offerPrice.toLocaleString()}</span>\n                        <span className=\"text-xl text-slate-400 line-through\">${offer.originalPrice.toLocaleString()}</span>\n                      </div>\n                    </div>\n                    <Badge className=\"bg-green-600 text-white text-lg px-3 py-1\">\n                      SAVE {offer.discount}%\n                    </Badge>\n                  </div>\n                  <p className=\"text-xs text-purple-700 mt-2\">\n                    \ud83d\udcb0 You save: ${(offer.originalPrice - offer.offerPrice).toLocaleString()}\n                  </p>\n                </div>\n\n                {/* Benefits */}\n                <div className=\"mb-4\">\n                  <h4 className=\"font-semibold text-sm text-slate-900 mb-3\">What's Included</h4>\n                  <div className=\"space-y-2\">\n                    {offer.benefits.map((benefit, i) => (\n                      <div key={i} className=\"flex items-start gap-2\">\n                        <Check className=\"w-4 h-4 text-green-600 flex-shrink-0 mt-0.5\" />\n                        <span className=\"text-sm text-slate-700\">{benefit}</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Conditions */}\n                <div className=\"mb-4 pb-4 border-b\">\n                  <h4 className=\"font-semibold text-sm text-slate-900 mb-3\">Booking Conditions</h4>\n                  <div className=\"space-y-2\">\n                    {offer.conditions.map((condition, i) => (\n                      <div key={i} className=\"flex items-start gap-2\">\n                        <Info className=\"w-4 h-4 text-slate-400 flex-shrink-0 mt-0.5\" />\n                        <span className=\"text-xs text-slate-600\">{condition}</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                {/* CTA */}\n                <Button\n                  className=\"w-full bg-gradient-to-r from-purple-600 to-rose-600 hover:from-purple-700 hover:to-rose-700\"\n                  size=\"lg\"\n                  onClick={() => handleAcceptOffer(offer)}\n                >\n                  <Target className=\"w-4 h-4 mr-2\" />\n                  Accept This Offer\n                  <ArrowRight className=\"w-4 h-4 ml-2\" />\n                </Button>\n              </div>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <Card className=\"p-12 text-center\">\n          <Target className=\"w-16 h-16 text-slate-300 mx-auto mb-4\" />\n          <h3 className=\"text-xl font-semibold mb-2 text-slate-900\">No Offers Yet</h3>\n          <p className=\"text-slate-600 mb-6\">\n            Create a dream and providers will start competing with exclusive deals!\n          </p>\n          <Button onClick={() => navigate('/smart-dreams?tab=library')} size=\"lg\">\n            Browse Dream Library\n          </Button>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport default ProviderMarketplace;\n