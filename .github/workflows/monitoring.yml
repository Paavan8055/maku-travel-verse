name: System Monitoring

on:
  schedule:
    # Run every 15 minutes
    - cron: '*/15 * * * *'
  workflow_dispatch:

jobs:
  health-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check Frontend Health
        id: frontend
        run: |
          FRONTEND_URL="${{ secrets.FRONTEND_URL }}"
          
          echo "Checking frontend health: $FRONTEND_URL"
          
          if curl -f -s --max-time 30 "$FRONTEND_URL" > /dev/null; then
            echo "status=healthy" >> $GITHUB_OUTPUT
            echo "✅ Frontend is healthy"
          else
            echo "status=unhealthy" >> $GITHUB_OUTPUT
            echo "❌ Frontend is unhealthy"
          fi

      - name: Check Backend Health
        id: backend
        run: |
          BACKEND_URL="${{ secrets.BACKEND_URL }}"
          
          echo "Checking backend health: $BACKEND_URL/api/health"
          
          RESPONSE=$(curl -s --max-time 30 "$BACKEND_URL/api/health" || echo "ERROR")
          
          if echo "$RESPONSE" | grep -q "healthy"; then
            echo "status=healthy" >> $GITHUB_OUTPUT
            echo "✅ Backend is healthy"
          else
            echo "status=unhealthy" >> $GITHUB_OUTPUT
            echo "❌ Backend is unhealthy"
            echo "Response: $RESPONSE"
          fi

      - name: Check Database Health
        id: database
        run: |
          SUPABASE_URL="${{ secrets.SUPABASE_URL }}"
          
          echo "Checking database health"
          
          RESPONSE=$(curl -s --max-time 30 "$SUPABASE_URL/rest/v1/environment?select=count" \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \
            -H "apikey: ${{ secrets.SUPABASE_ANON_KEY }}" || echo "ERROR")
          
          if echo "$RESPONSE" | grep -q "\["; then
            echo "status=healthy" >> $GITHUB_OUTPUT
            echo "✅ Database is healthy"
          else
            echo "status=unhealthy" >> $GITHUB_OUTPUT
            echo "❌ Database is unhealthy"
          fi

      - name: Check Provider Connections
        id: providers
        run: |
          BACKEND_URL="${{ secrets.BACKEND_URL }}"
          
          echo "Checking provider connections"
          
          RESPONSE=$(curl -s --max-time 60 -X POST "$BACKEND_URL/api/config/test-connections" \
            -H "Content-Type: application/json" || echo "ERROR")
          
          if echo "$RESPONSE" | grep -q '"success": true'; then
            echo "status=healthy" >> $GITHUB_OUTPUT
            echo "✅ Providers are healthy"
            
            # Extract provider details
            HEALTHY_COUNT=$(echo "$RESPONSE" | jq -r '.connections | to_entries | map(select(.value.status == "configured")) | length')
            TOTAL_COUNT=$(echo "$RESPONSE" | jq -r '.connections | length')
            
            echo "healthy_count=$HEALTHY_COUNT" >> $GITHUB_OUTPUT
            echo "total_count=$TOTAL_COUNT" >> $GITHUB_OUTPUT
            echo "Providers: $HEALTHY_COUNT/$TOTAL_COUNT healthy"
          else
            echo "status=unhealthy" >> $GITHUB_OUTPUT
            echo "❌ Provider connections failed"
          fi

      - name: Test AI Assistant
        id: ai
        run: |
          BACKEND_URL="${{ secrets.BACKEND_URL }}"
          
          echo "Testing AI assistant"
          
          RESPONSE=$(curl -s --max-time 45 -X POST "$BACKEND_URL/api/ai/chat" \
            -H "Content-Type: application/json" \
            -d '{"prompt": "Hello, test message", "prefer_free": true}' || echo "ERROR")
          
          if echo "$RESPONSE" | grep -q '"success": true'; then
            echo "status=healthy" >> $GITHUB_OUTPUT
            echo "✅ AI assistant is healthy"
          else
            echo "status=unhealthy" >> $GITHUB_OUTPUT
            echo "❌ AI assistant is unhealthy"
          fi

  performance-monitoring:
    runs-on: ubuntu-latest
    steps:
      - name: Measure Response Times
        id: performance
        run: |
          FRONTEND_URL="${{ secrets.FRONTEND_URL }}"
          BACKEND_URL="${{ secrets.BACKEND_URL }}"
          
          echo "Measuring response times..."
          
          # Frontend response time
          FRONTEND_TIME=$(curl -w '%{time_total}' -s -o /dev/null --max-time 30 "$FRONTEND_URL")
          echo "frontend_time=$FRONTEND_TIME" >> $GITHUB_OUTPUT
          echo "Frontend response time: ${FRONTEND_TIME}s"
          
          # Backend API response time
          BACKEND_TIME=$(curl -w '%{time_total}' -s -o /dev/null --max-time 30 "$BACKEND_URL/api/health")
          echo "backend_time=$BACKEND_TIME" >> $GITHUB_OUTPUT
          echo "Backend response time: ${BACKEND_TIME}s"
          
          # Provider search response time
          SEARCH_TIME=$(curl -w '%{time_total}' -s -o /dev/null --max-time 60 -X POST "$BACKEND_URL/api/providers/search/hotels" \
            -H "Content-Type: application/json" \
            -d '{"destination": "New York", "checkin_date": "2024-12-01", "checkout_date": "2024-12-03"}')
          echo "search_time=$SEARCH_TIME" >> $GITHUB_OUTPUT
          echo "Provider search response time: ${SEARCH_TIME}s"

      - name: Check Performance Thresholds
        run: |
          FRONTEND_TIME="${{ steps.performance.outputs.frontend_time }}"
          BACKEND_TIME="${{ steps.performance.outputs.backend_time }}"
          SEARCH_TIME="${{ steps.performance.outputs.search_time }}"
          
          # Define thresholds (in seconds)
          FRONTEND_THRESHOLD=3
          BACKEND_THRESHOLD=2
          SEARCH_THRESHOLD=10
          
          ISSUES=0
          
          if (( $(echo "$FRONTEND_TIME > $FRONTEND_THRESHOLD" | bc -l) )); then
            echo "⚠️ Frontend response time exceeded threshold: ${FRONTEND_TIME}s > ${FRONTEND_THRESHOLD}s"
            ISSUES=$((ISSUES + 1))
          fi
          
          if (( $(echo "$BACKEND_TIME > $BACKEND_THRESHOLD" | bc -l) )); then
            echo "⚠️ Backend response time exceeded threshold: ${BACKEND_TIME}s > ${BACKEND_THRESHOLD}s"
            ISSUES=$((ISSUES + 1))
          fi
          
          if (( $(echo "$SEARCH_TIME > $SEARCH_THRESHOLD" | bc -l) )); then
            echo "⚠️ Search response time exceeded threshold: ${SEARCH_TIME}s > ${SEARCH_THRESHOLD}s"
            ISSUES=$((ISSUES + 1))
          fi
          
          if [ $ISSUES -gt 0 ]; then
            echo "❌ Performance issues detected: $ISSUES"
            exit 1
          else
            echo "✅ All performance metrics within thresholds"
          fi

  provider-monitoring:
    runs-on: ubuntu-latest
    steps:
      - name: Test All Providers
        run: |
          BACKEND_URL="${{ secrets.BACKEND_URL }}"
          
          echo "Testing all travel providers..."
          
          # Test provider health
          curl -X POST "$BACKEND_URL/api/providers/health-check" \
            -H "Content-Type: application/json" \
            -o provider_health.json
          
          # Check if any providers are down
          UNHEALTHY_PROVIDERS=$(cat provider_health.json | jq -r '.health_check | to_entries | map(select(.value.health_status == false)) | length')
          
          if [ "$UNHEALTHY_PROVIDERS" -gt 0 ]; then
            echo "❌ Unhealthy providers detected: $UNHEALTHY_PROVIDERS"
            cat provider_health.json | jq '.health_check | to_entries | map(select(.value.health_status == false))'
            exit 1
          else
            echo "✅ All providers are healthy"
          fi

      - name: Test Search Functionality
        run: |
          BACKEND_URL="${{ secrets.BACKEND_URL }}"
          
          echo "Testing search functionality across providers..."
          
          # Test flight search
          echo "Testing flight search..."
          curl -X POST "$BACKEND_URL/api/providers/search/flights" \
            -H "Content-Type: application/json" \
            -d '{"origin": "NYC", "destination": "LAX", "departure_date": "2024-12-01", "adults": 1}' \
            -o flight_search.json
          
          FLIGHT_SUCCESS=$(cat flight_search.json | jq -r '.success')
          if [ "$FLIGHT_SUCCESS" = "true" ]; then
            echo "✅ Flight search working"
          else
            echo "❌ Flight search failed"
            cat flight_search.json
          fi
          
          # Test hotel search
          echo "Testing hotel search..."
          curl -X POST "$BACKEND_URL/api/providers/search/hotels" \
            -H "Content-Type: application/json" \
            -d '{"destination": "Paris", "checkin_date": "2024-12-01", "checkout_date": "2024-12-03", "adults": 2}' \
            -o hotel_search.json
          
          HOTEL_SUCCESS=$(cat hotel_search.json | jq -r '.success')
          if [ "$HOTEL_SUCCESS" = "true" ]; then
            echo "✅ Hotel search working"
          else
            echo "❌ Hotel search failed"
            cat hotel_search.json
          fi
          
          # Test activity search
          echo "Testing activity search..."
          curl -X POST "$BACKEND_URL/api/providers/search/activities" \
            -H "Content-Type: application/json" \
            -d '{"destination": "London", "date": "2024-12-01", "participants": 2}' \
            -o activity_search.json
          
          ACTIVITY_SUCCESS=$(cat activity_search.json | jq -r '.success')
          if [ "$ACTIVITY_SUCCESS" = "true" ]; then
            echo "✅ Activity search working"
          else
            echo "❌ Activity search failed"
            cat activity_search.json
          fi

  ai-monitoring:
    runs-on: ubuntu-latest
    steps:
      - name: Test AI Provider Status
        run: |
          BACKEND_URL="${{ secrets.BACKEND_URL }}"
          
          echo "Testing AI provider status..."
          
          curl -X GET "$BACKEND_URL/api/ai/providers/status" \
            -H "Content-Type: application/json" \
            -o ai_status.json
          
          AI_SUCCESS=$(cat ai_status.json | jq -r '.success')
          AVAILABLE_PROVIDERS=$(cat ai_status.json | jq -r '.available_providers')
          
          if [ "$AI_SUCCESS" = "true" ] && [ "$AVAILABLE_PROVIDERS" -gt 0 ]; then
            echo "✅ AI providers are available: $AVAILABLE_PROVIDERS"
          else
            echo "❌ AI providers unavailable"
            cat ai_status.json
          fi

      - name: Test AI Chat Functionality
        run: |
          BACKEND_URL="${{ secrets.BACKEND_URL }}"
          
          echo "Testing AI chat functionality..."
          
          curl -X POST "$BACKEND_URL/api/ai/chat" \
            -H "Content-Type: application/json" \
            -d '{"prompt": "Plan a 3-day trip to Tokyo", "prefer_free": true}' \
            -o ai_chat.json
          
          CHAT_SUCCESS=$(cat ai_chat.json | jq -r '.success')
          
          if [ "$CHAT_SUCCESS" = "true" ]; then
            echo "✅ AI chat working"
            PROVIDER=$(cat ai_chat.json | jq -r '.response.provider')
            echo "AI Provider used: $PROVIDER"
          else
            echo "❌ AI chat failed"
            cat ai_chat.json
          fi

  create-monitoring-report:
    needs: [health-check, performance-monitoring, provider-monitoring, ai-monitoring]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Generate Monitoring Report
        run: |
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          cat > monitoring_report.json << EOF
          {
            "timestamp": "$TIMESTAMP",
            "git_commit": "${{ github.sha }}",
            "workflow_run": "${{ github.run_id }}",
            "health_status": {
              "frontend": "${{ needs.health-check.outputs.frontend_status }}",
              "backend": "${{ needs.health-check.outputs.backend_status }}",
              "database": "${{ needs.health-check.outputs.database_status }}",
              "providers": "${{ needs.health-check.outputs.providers_status }}",
              "ai": "${{ needs.health-check.outputs.ai_status }}"
            },
            "performance": {
              "frontend_response_time": "${{ needs.performance-monitoring.outputs.frontend_time }}",
              "backend_response_time": "${{ needs.performance-monitoring.outputs.backend_time }}",
              "search_response_time": "${{ needs.performance-monitoring.outputs.search_time }}"
            },
            "provider_health": {
              "healthy_providers": "${{ needs.health-check.outputs.healthy_count }}",
              "total_providers": "${{ needs.health-check.outputs.total_count }}"
            }
          }
          EOF
          
          echo "Monitoring report generated"
          cat monitoring_report.json

      - name: Store Monitoring Data
        run: |
          # Store monitoring data in Supabase for historical tracking
          SUPABASE_URL="${{ secrets.SUPABASE_URL }}"
          
          curl -X POST "$SUPABASE_URL/rest/v1/monitoring_logs" \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \
            -H "Content-Type: application/json" \
            -H "apikey: ${{ secrets.SUPABASE_ANON_KEY }}" \
            -d @monitoring_report.json

      - name: Check Alert Conditions
        run: |
          FRONTEND_STATUS="${{ needs.health-check.outputs.frontend_status }}"
          BACKEND_STATUS="${{ needs.health-check.outputs.backend_status }}"
          DATABASE_STATUS="${{ needs.health-check.outputs.database_status }}"
          
          CRITICAL_ISSUES=0
          
          if [ "$FRONTEND_STATUS" = "unhealthy" ]; then
            echo "🚨 CRITICAL: Frontend is down"
            CRITICAL_ISSUES=$((CRITICAL_ISSUES + 1))
          fi
          
          if [ "$BACKEND_STATUS" = "unhealthy" ]; then
            echo "🚨 CRITICAL: Backend is down"
            CRITICAL_ISSUES=$((CRITICAL_ISSUES + 1))
          fi
          
          if [ "$DATABASE_STATUS" = "unhealthy" ]; then
            echo "🚨 CRITICAL: Database is down"
            CRITICAL_ISSUES=$((CRITICAL_ISSUES + 1))
          fi
          
          if [ $CRITICAL_ISSUES -gt 0 ]; then
            echo "CRITICAL_ISSUES=$CRITICAL_ISSUES" >> $GITHUB_ENV
          else
            echo "✅ No critical issues detected"
          fi

      - name: Send Critical Alerts
        if: env.CRITICAL_ISSUES > 0
        run: |
          echo "🚨 SENDING CRITICAL ALERTS"
          echo "Critical issues detected: ${{ env.CRITICAL_ISSUES }}"
          
          # Here you would send alerts to:
          # - Slack/Discord webhooks
          # - Email notifications  
          # - PagerDuty/OpsGenie
          # - SMS alerts
          
          echo "Alert sent for critical system issues"

  uptime-tracking:
    runs-on: ubuntu-latest
    steps:
      - name: Calculate Uptime Metrics
        run: |
          echo "Calculating uptime metrics..."
          
          # This would typically query historical monitoring data
          # For now, we'll create a basic uptime check
          
          CURRENT_TIME=$(date +%s)
          
          # Mock uptime calculation (in production, this would use real data)
          UPTIME_PERCENTAGE=99.95
          DOWNTIME_MINUTES=7
          
          echo "System Uptime: ${UPTIME_PERCENTAGE}%"
          echo "Downtime this month: ${DOWNTIME_MINUTES} minutes"
          
          # Store uptime metrics
          cat > uptime_metrics.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "uptime_percentage": $UPTIME_PERCENTAGE,
            "downtime_minutes": $DOWNTIME_MINUTES,
            "measurement_period": "30_days"
          }
          EOF

  notify:
    needs: [health-check, performance-monitoring, provider-monitoring, ai-monitoring]
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Notify Monitoring Failure
        run: |
          echo "❌ System monitoring detected issues"
          echo "Failed jobs: ${{ needs.*.result }}"
          
          # Send notification about monitoring issues
          # This would integrate with your alerting system