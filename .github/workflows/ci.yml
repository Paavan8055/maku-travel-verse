name: CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

# Cancel previous runs on the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint & Security Checks
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline
        timeout-minutes: 10

      - name: Secrets quick-scan (grep heuristics)
        run: |
          set -e
          echo "Running lightweight secrets scan"
          # Search for likely secret variable names or keys committed directly
          if git grep -I --line-number -n "SUPABASE_SERVICE_ROLE_KEY\|STRIPE_SECRET_KEY\|SECRET_KEY\|PRIVATE_KEY\|AWS_SECRET_ACCESS_KEY\|BEGIN PRIVATE KEY"; then
            echo "Potential secret literals found in repository files - please ensure secrets are not committed.";
            git --no-pager grep -n "SUPABASE_SERVICE_ROLE_KEY\|STRIPE_SECRET_KEY\|SECRET_KEY\|PRIVATE_KEY\|AWS_SECRET_ACCESS_KEY\|BEGIN PRIVATE KEY"
            exit 1;
          else
            echo "No obvious secret literals found by quick-scan.";
          fi

      - name: Run ESLint
        run: npm run lint
        timeout-minutes: 5

      - name: Check Supabase version consistency
        run: npm run check:supabase-version
        timeout-minutes: 2

      - name: Type check
        run: npx tsc --noEmit
        timeout-minutes: 5

  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        node-version: [20]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline
        timeout-minutes: 10

      - name: Run tests
        run: npm run test -- --reporter=verbose --coverage
        timeout-minutes: 15
        env:
          NODE_ENV: test

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report-${{ matrix.node-version }}
          path: coverage/
          retention-days: 7

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-results-${{ matrix.node-version }}
          path: |
            test-results.xml
            logs/
          retention-days: 3

  build:
    name: Build Check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline
        timeout-minutes: 10

      - name: Build application
        run: npm run build
        timeout-minutes: 10

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  gitleaks:
    name: Secret scan (gitleaks)
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run gitleaks
        uses: zricethezav/gitleaks-action@v2
        with:
          args: "--verbose --redact"

  verify-jwt-check:
    name: Verify JWT enforcement check
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run verify_jwt report
        run: |
          node scripts/report-verify-jwt.js
        env:
          # Optional: provide comma-separated critical function names to enforce
          CRITICAL_FUNCTIONS: "create-booking,create-booking-payment,create-hotel-booking,create-flight-booking,verify-booking-payment,create-payment-intent"

  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [lint, test, build]
    if: always()
    steps:
      - name: Check job results
        run: |
          echo "Lint result: ${{ needs.lint.result }}"
          echo "Test result: ${{ needs.test.result }}"
          echo "Build result: ${{ needs.build.result }}"
          
          if [[ "${{ needs.lint.result }}" == "failure" || "${{ needs.test.result }}" == "failure" || "${{ needs.build.result }}" == "failure" ]]; then
            echo "❌ Quality gates failed"
            exit 1
          else
            echo "✅ All quality gates passed"
          fi
