name: Database Restore

on:
  workflow_dispatch:
    inputs:
      backup_file:
        description: 'Backup file to restore from'
        required: true
        type: string
      target_environment:
        description: 'Environment to restore to'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production
      confirm_restore:
        description: 'Type "CONFIRM" to proceed with restore'
        required: true
        type: string

jobs:
  validate-inputs:
    runs-on: ubuntu-latest
    steps:
      - name: Validate Confirmation
        run: |
          if [ "${{ github.event.inputs.confirm_restore }}" != "CONFIRM" ]; then
            echo "❌ Restore not confirmed. Please type 'CONFIRM' to proceed."
            exit 1
          fi

      - name: Validate Environment
        run: |
          VALID_ENVS="development staging production"
          TARGET="${{ github.event.inputs.target_environment }}"
          
          if [[ ! $VALID_ENVS =~ $TARGET ]]; then
            echo "❌ Invalid target environment: $TARGET"
            exit 1
          fi
          
          if [ "$TARGET" = "production" ] && [ "${{ github.ref }}" != "refs/heads/main" ]; then
            echo "❌ Production restore can only be triggered from main branch"
            exit 1
          fi

  pre-restore-backup:
    needs: [validate-inputs]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Link Supabase Project
        run: |
          supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_ID }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Create Pre-Restore Backup
        run: |
          BACKUP_NAME="pre-restore-backup-$(date +%Y%m%d-%H%M%S)"
          echo "Creating pre-restore backup: $BACKUP_NAME"
          
          mkdir -p backups
          supabase db dump > "backups/${BACKUP_NAME}.sql"
          gzip "backups/${BACKUP_NAME}.sql"
          
          echo "PRE_RESTORE_BACKUP=${BACKUP_NAME}" >> $GITHUB_ENV

      - name: Store Pre-Restore Backup
        run: |
          echo "Pre-restore backup created: ${{ env.PRE_RESTORE_BACKUP }}"
          # Store backup metadata for recovery purposes

  restore:
    needs: [pre-restore-backup]
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.target_environment }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Download Backup File
        run: |
          BACKUP_FILE="${{ github.event.inputs.backup_file }}"
          echo "Downloading backup file: $BACKUP_FILE"
          
          # Download from cloud storage (adjust based on your storage)
          # aws s3 cp "s3://${{ secrets.S3_BACKUP_BUCKET }}/maku-travel/$BACKUP_FILE" ./
          
          # For now, check if file exists locally
          if [ ! -f "$BACKUP_FILE" ]; then
            echo "❌ Backup file not found: $BACKUP_FILE"
            exit 1
          fi

      - name: Link Supabase Project
        run: |
          supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_ID }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Stop Application (if needed)
        run: |
          echo "Stopping application for restore..."
          # Add commands to gracefully stop the application

      - name: Restore Database
        run: |
          BACKUP_FILE="${{ github.event.inputs.backup_file }}"
          TARGET_ENV="${{ github.event.inputs.target_environment }}"
          
          echo "Restoring database from: $BACKUP_FILE"
          echo "Target environment: $TARGET_ENV"
          
          # Decompress if needed
          if [[ $BACKUP_FILE == *.gz ]]; then
            gunzip "$BACKUP_FILE"
            BACKUP_FILE="${BACKUP_FILE%.gz}"
          fi
          
          # Restore database
          supabase db reset --linked
          psql "${{ secrets.DATABASE_URL }}" < "$BACKUP_FILE"

      - name: Validate Restore
        run: |
          # Run basic validation queries
          echo "Validating restore..."
          
          # Check if key tables exist and have data
          supabase db --linked --execute "
            SELECT 'environment' as table_name, count(*) as row_count FROM environment
            UNION ALL
            SELECT 'provider_configs' as table_name, count(*) as row_count FROM provider_configs
            UNION ALL  
            SELECT 'waitlist' as table_name, count(*) as row_count FROM waitlist;
          "

      - name: Update Environment Configuration
        run: |
          # Update environment-specific configurations after restore
          TARGET_ENV="${{ github.event.inputs.target_environment }}"
          
          curl -X POST "${{ secrets.SUPABASE_URL }}/functions/v1/environment-config" \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \
            -H "Content-Type: application/json" \
            -d "{\"action\": \"switch_environment\", \"environment\": \"$TARGET_ENV\"}"

      - name: Start Application
        run: |
          echo "Starting application..."
          # Add commands to start the application

  post-restore-tests:
    needs: [restore]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Health Checks
        run: |
          BACKEND_URL="${{ secrets.BACKEND_URL }}"
          
          echo "Running post-restore health checks..."
          
          # Test configuration
          curl -X GET "$BACKEND_URL/api/config/validate"
          
          # Test provider connections
          curl -X POST "$BACKEND_URL/api/config/test-connections"
          
          # Test waitlist functionality
          curl -X GET "$BACKEND_URL/api/waitlist/stats"

      - name: Validate Frontend
        run: |
          FRONTEND_URL="${{ secrets.FRONTEND_URL }}"
          
          # Test key pages
          curl -f "$FRONTEND_URL/" > /dev/null
          curl -f "$FRONTEND_URL/hotels" > /dev/null
          curl -f "$FRONTEND_URL/activities" > /dev/null

  notify:
    needs: [restore, post-restore-tests]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Success
        if: needs.post-restore-tests.result == 'success'
        run: |
          echo "✅ Database restore completed successfully"
          echo "Environment: ${{ github.event.inputs.target_environment }}"
          echo "Backup file: ${{ github.event.inputs.backup_file }}"
          
      - name: Notify Failure
        if: needs.post-restore-tests.result == 'failure'
        run: |
          echo "❌ Database restore failed"
          echo "Pre-restore backup available for recovery"
          exit 1